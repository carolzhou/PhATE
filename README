README file for the Phage Annotation Toolkit and Evaluation (PhATE) pipeline.

# This code was developed by Carol L. Ecale Zhou and Jeffrey Kimbrel at Lawrence Livermore National Laboratory.
# THIS CODE IS COVERED BY THE BSD LICENSE. SEE INCLUDED FILE BSD.pdf FOR DETAILS.

ABOOUT THE PHATE PIPELINE

PhATE is a fully automated computational pipeline for annotating phage genomes or for identifying putative phage genes in bacterial genomes. PhATE is written in Python 2.7. Code execution is controled by a configuration file (phate.config), which can be tailored to run specific gene finders and to blast sequences against specific phage- or virus-centric data sets. PhATE runs at least one gene finding algorithm, then annotated the genome, gene, and protein sequences using blast and a set of fasta sequence databases. If more than one gene finder is run, PhATE will also provide a side-by-side comparison of the genes called by each gene caller. The user specifies the preferred gene caller, and the genes and proteins predicted by that caller are annotated using blast against the supporting databases. Classification of each protein sequence into a pVOGs group is followed by generation of an aignment-ready fasta file.

HOW TO SET UP PHATE ON YOUR LOCAL MACHINE

You will need to acquire one or more of the databases listed below under SUPPORING DATABASES, and the 3rd party codes listed under SUPPORTING 3rd PARTY CODES. You will need to acquire at least one of the supported gene finders, but it is recommended to run all four gene finders so that the results can be meaningfully compared. You will need to specifiy the locations of the supporting data sets and codes in phate_runPipeline.py, and you will need to locate your genome file in the PipelineInput directory. Place your configuration file at the top level (alongside phate_runPipeline.py).

Run the PhATE pipeline at the command line using the following command:
$ python phate_runPipeline.py phate.config

SUPPORTING DATABASES

It is recommended that the user acquire all of the following sequence databases and associated codes, although none are actually required to run the code.

* NCBI virus genomes - ftp://ftp.ncbi.nlm.nih.gov/refseq/release/viral/ or https://www.ncbi.nlm.nih.gov/genome/viruses/viral.1.1.1.genomic.fna.gz
* NCBI accession2taxid file - ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/nucl_gb.accession2taxid.gz or https://www.ncbi.nlm.nih.gov/guide/taxonomy/nucl_gb.accession2taxid.gz
* NCBI Refseq Protein - download using blast+: /bin/update_blastdb/pl refseq_protein
* NR - ftp://ftp.ncbi.nlm.nih.gov/nr/
* KEGG virus subset - (available by license) http://www.kegg.jp/kegg/download/
* KEGG associated files - T40000.pep, T40000.nuc, vg_enzyme.list, vg_genome.list, vg_ko.list, vg_ncbi-geneid.list, vg_ncbi-proteinid.list, vg_pfam.list, vg_rs.list, vg_tax.list, vg_uniprot.list 
* Phantome protein fasta sequences - http://www.phantome.org/Downloads/phage_proteins_nnnnnnnnn.fasta
* pVOGs prepared database (pVOGs.faa) - included in PhATE distribution. This data set was derived by C. Zhou from the pVOGs fasta database. The sequence fasta headers have been modified to include the pVOG identifiers (all groups to which each sequence belongs). This re-formatting facilitates pVOG group identification and construction of the alignment-ready fasta files. Codes for reconstructing this modified data set are included in the PhATE distribution.

SUPPORTING 3rd PARTY CODES

* BioPython
* EMBOSS package
* Blast+ https://ncbi.nlm.nih.gov/blast
* GeneMarkS - http://exon.gatech.edu/Genemark/index.html
* Glimmer - https://ccb.jhu.edu/software/glimmer/
* Prodigal - https://github.com/hyattpd/Prodigal
* THEA - https://github.com/deprekate/THEA

HOW TO WRITE A CONFIGURATION FILE

Locations of supporting databases and codes are specified in the file, phate_runPipeline.py. 

A sample configuration file is provided (phate.config). Make a copy of this file and rename it accordingly. The phate.config file is configured according to established default parameters. Any of the parameters may be modified (switches turned 'on' or 'off') by assigning 'true' or 'false'. It is suggested that you turn swithes off, then install each supporting database in turn and test the code. A switch not included in the configuration file is CLEAN, which you will find in phate_blast.py (under the SequenceAnnotation directory). By default all raw blast output (written under PipelineOutput/BLAST/ subdirectories) will be deleted, so as to limit output volume. However, if you wish to retain that output, turn the CLEAN switch to 'True' in phate_blast.py.

RUNNING PHATE AS AN "EMBARASSINGLY PARALLEL" CODE

Phate output is written to a user-specified output directory (specified in phate.config). In this way, PhATE may be set up to run in parallel on any number of nodes of a compute cluster without fear of clashes in writing results.

FURTHER RECOMMENDATIONS

PhATE was originally developed for anotating phage genome sequences. However, PhATE may also be useful in helping to identify phage genes within bacterial genomes (i.e., prophage). Thus, the user has the option of running multiple gene callers for bacterial genome sequence (GeneMarkS, Glimmer, Prodigal) and a new gene finder specifically for phage (THEA). The calls from any two or more of these callers are compared by the PhATE/CGC code so that the user can examine the calls that agree or disagree among the callers, and then run PhaTE again, selecting the caller of choice for annotating the sequence. 

Although all supporting data sets are phage- or virus-centric, NR and Refseq Protein are included in order to help identify genes/functions that are not known in the virus/phage gene data sets. However, PhATE is not intended to be the sole source for anntotation of bacterial genome sequences, as PhATE is tailored for identification of genes and functions in phage.

The NR database has grown enormously large. It is recommended to use a smaller database, such as Refseq Protein in place of NR. Furthermore, annotating with NR will add greatly to the time required for processing a genome through PhATE. It is recommended that NR be turned 'off' ('false') until one desires to preform a full/final annotation of the genome of interest, if using NR.
